# Upsert a student (used for logged-in users)
mutation UpsertStudent($email: String!, $name: String!) @auth(level: USER) {
  student_upsert(
    data: {
      id_expr: "auth.uid"
      email: $email
      name: $name
    }
  )
}

# Upsert an instructor (used for logged-in users)
mutation UpsertInstructor($email: String!, $name: String!) @auth(level: USER) {
  instructor_upsert(
    data: {
      id_expr: "auth.uid"
      email: $email
      name: $name
    }
  )
}

mutation UpsertSubject( $name: String!, $code: String!) @auth(level: USER) {
  subject_upsert(
    data: {
      id_expr: "uuidV4()"
      name: $name
      subjectCode: $code
    }
  )
}

mutation UpsertGroup($subjectId: UUID!, $studentId: String, $day: String!, $startTime: String!, $endTime: String!) @auth(level: USER) {
  group_upsert(
    data: {
      id_expr: "uuidV4()"
      subject: { id: $subjectId }
      day: $day
      startTime: $startTime
      endTime: $endTime
      students: { id: $studentId }
    }
  )
}

mutation UpsertAttendance( $student: Student_Key!,$group: Group_Key!,$status: String!) @auth(level: USER) {
  attendance_upsert(
    data: {
      id_expr: "uuidV4()"
      student: $student
      group: $group
      status: $status
    }
  )
}

# Delete a student
mutation DeleteStudent($id: String!) @auth(level: USER) {
  student_delete(
      id: $id,
  )
}

# Delete an instructor
mutation DeleteInstructor($id: String!) @auth(level: USER) {
  instructor_delete(
      id: $id,
  )
}

mutation DeleteSubject($id: UUID!) @auth(level: USER) {
  subject_delete(id: $id)
}

mutation DeleteGroup($id: UUID!) @auth(level: USER) {
  group_delete(id: $id)
}

mutation DeleteAttendance($id: UUID!) @auth(level: USER) {
  attendance_delete(id: $id)
}