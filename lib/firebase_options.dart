// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get web {
    return FirebaseOptions(
      apiKey: String.fromEnvironment('WEB_API_KEY'),
      appId: String.fromEnvironment('WEB_APP_ID'),
      messagingSenderId: String.fromEnvironment('WEB_MESSAGING_SENDER_ID'),
      projectId: String.fromEnvironment('PROJECT_ID'),
      authDomain: String.fromEnvironment('WEB_AUTH_DOMAIN'),
      storageBucket: String.fromEnvironment('WEB_STORAGE_BUCKET'),
      measurementId: String.fromEnvironment('WEB_MEASUREMENT_ID'),
    );
  }

  static FirebaseOptions get android {
    return FirebaseOptions(
      apiKey: String.fromEnvironment('ANDROID_API_KEY'),
      appId: String.fromEnvironment('ANDROID_APP_ID'),
      messagingSenderId: String.fromEnvironment('ANDROID_MESSAGING_SENDER_ID'),
      projectId: String.fromEnvironment('PROJECT_ID'),
      storageBucket: String.fromEnvironment('ANDROID_STORAGE_BUCKET'),
    );
  }

  static FirebaseOptions get ios {
    return FirebaseOptions(
      apiKey: String.fromEnvironment('IOS_API_KEY'),
      appId: String.fromEnvironment('IOS_APP_ID'),
      messagingSenderId: String.fromEnvironment('IOS_MESSAGING_SENDER_ID'),
      projectId: String.fromEnvironment('PROJECT_ID'),
      storageBucket: String.fromEnvironment('IOS_STORAGE_BUCKET'),
      iosBundleId: String.fromEnvironment('IOS_BUNDLE_ID'),
    );
  }

  static FirebaseOptions get macos {
    return FirebaseOptions(
      apiKey: String.fromEnvironment('IOS_API_KEY'),
      appId: String.fromEnvironment('IOS_APP_ID'),
      messagingSenderId: String.fromEnvironment('IOS_MESSAGING_SENDER_ID'),
      projectId: String.fromEnvironment('PROJECT_ID'),
      storageBucket: String.fromEnvironment('IOS_STORAGE_BUCKET'),
      iosBundleId: String.fromEnvironment('IOS_BUNDLE_ID'),
    );
  }

  static FirebaseOptions get windows {
    return FirebaseOptions(
      apiKey: String.fromEnvironment('WEB_API_KEY'),
      appId: String.fromEnvironment('WEB_APP_ID'),
      messagingSenderId: String.fromEnvironment('WEB_MESSAGING_SENDER_ID'),
      projectId: String.fromEnvironment('PROJECT_ID'),
      authDomain: String.fromEnvironment('WEB_AUTH_DOMAIN'),
      storageBucket: String.fromEnvironment('WEB_STORAGE_BUCKET'),
      measurementId: String.fromEnvironment('WEB_MEASUREMENT_ID'),
    );
  }
}
